"""–¢–µ—Å—Ç OCR –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö."""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é documentor
sys.path.insert(0, str(Path(__file__).parent / "documentor"))

from PIL import Image
from documentor.pipelines.ocr import PDFProcessor, OCRPipelineConfig


def test_image_processing(image_path: str):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    print(f"\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size[0]}x{image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = OCRPipelineConfig.create_default()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = PDFProcessor(config)
        print(f"‚úÖ PDFProcessor —Å–æ–∑–¥–∞–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        fragments = list(processor.process_image(image))
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(fragments)}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, fragment in enumerate(fragments, 1):
            print(f"\n--- –§—Ä–∞–≥–º–µ–Ω—Ç {i} ---")
            print(f"–¢–∏–ø: {type(fragment).__name__}")
            print(f"–¢–µ–∫—Å—Ç: {fragment.value[:100]}{'...' if len(fragment.value) > 100 else ''}")
            if hasattr(fragment, 'style') and fragment.style:
                print(f"–°—Ç–∏–ª—å: {fragment.style}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_pdf_processing(pdf_path: str):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF."""
    print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º PDF: {pdf_path}")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PyPDF2
        try:
            import PyPDF2
            print("‚úÖ PyPDF2 –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            print("‚ö†Ô∏è PyPDF2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - selectable text –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = OCRPipelineConfig.create_default()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = PDFProcessor(config)
        print(f"‚úÖ PDFProcessor —Å–æ–∑–¥–∞–Ω")
        
        # –î–ª—è PDF –Ω—É–∂–µ–Ω page_image, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF...")
            
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(pdf_path):
                file_size = os.path.getsize(pdf_path)
                print(f"‚úÖ PDF —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_size} –±–∞–π—Ç")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å selectable text
                selectable_text = processor.extract_selectable_text(pdf_path, page_num=0)
                if selectable_text:
                    print(f"‚úÖ Selectable text –Ω–∞–π–¥–µ–Ω: {len(selectable_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {selectable_text[:200]}...")
                else:
                    print("‚ö†Ô∏è Selectable text –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω—É–∂–µ–Ω OCR")
                
                return True
            else:
                print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ OCR –ø–∞–π–ø–ª–∞–π–Ω–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = "example.jpg"
    if os.path.exists(image_path):
        test_image_processing(image_path)
    else:
        print(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PDF
    pdf_path = "example.pdf"
    if os.path.exists(pdf_path):
        test_pdf_processing(pdf_path)
    else:
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
